datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

enum ImageType {
  profileImage
  Image
}
 
 
model Session {
  id           String   @id 
  userId       String   @map("user_id")
  expiresAt    DateTime @db.Timestamptz()
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id
  name          String?
  email         String   @unique
  emailVerified DateTime? @map("email_verified")
  hashPassword  String?
  image         String?
  sessions      Session[]
  profile       Profile[]
  @@map("users")
}

model Profile {
  id          String @id
  userId      String @map("user_id") @unique
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  bio         String
  role        String
  ideas        Ideas[]
  images        Image[]
  videos        Video[]
  @@map("profiles")

}

model Ideas {
  id          Int @id @default(autoincrement())
  profileId      String @map("profile_id")
  title       String
  description String
  Profile     Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  image       Image[]
  video       Video[]
  tag         Tag[]
  catergory   category[]

  @@map("ideas")
}

model Image {
  id          Int @id @default(autoincrement())
  url         String
  profileId   String? @map("profile_id")
  profile     Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  ideasId     Int? @map("ideas_id")
  idea         Ideas?  @relation(fields: [ideasId], references: [id], onDelete: Cascade)
  type         ImageType 

  @@map("images")
}

model Video {
  id          Int @id @default(autoincrement())
  url         String
  profileId   String? @map("profile_id")
  profile     Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  ideasId     Int? @map("ideas_id")
  idea        Ideas?  @relation(fields: [ideasId], references: [id], onDelete: Cascade)


  @@map("videos")
}

model Tag {
  id        Int @id @default(autoincrement())
  value     String
  ideasId   Int? @map("ideas_id")
  idea      Ideas? @relation(fields: [ideasId], references: [id], onDelete: Cascade)
}

model category {
  id        Int @id @default(autoincrement())
  value     String
  ideasId   Int? @map("ideas_id")
  idea      Ideas? @relation(fields: [ideasId], references: [id], onDelete: Cascade)
}
 